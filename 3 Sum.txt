3SUM approach
Using a map,

target will be - (current + nums[j])
because like 1,0,-1 we have
then -1 is ans for -(1+0) then it will
add map [0] = 1

again when it comes,
ans is -(1-1) is 0 so
0 is already here in map. Now, 1 + 0 - 1

# 3 2 -3 0 1
# -3 0 1 2 3

map = {0:0}



class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        maping = {}
        nums = sorted(nums)
        data = set()
        for i in range( len(nums) ):
            for j in range ( i+1, len(nums) ):
                target = - (nums[i] + nums[j])

                if target in maping and i!=j and i!= maping[target] and j!= maping[target]:     
                    trip =  [ nums[i] , target , nums[j] ] 
                    trip = tuple(sorted([nums[i], target, nums[j]]))  
                    if nums[i] + target + nums[j] == 0:
                       data.add( trip  )
                maping [ nums[j]  ] = j # key -> array value, value -> array index
        return [list(trip) for trip in data]
                    
        


Second Approach,


Two pointers,

take first element fixed
move left and right accordingly




def threeSum(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        print(nums)
        data = []
        # to ensure that two elements left after first one
        for i in range( len(nums) - 2 ):
            left = i + 1
            right = len(nums) - 1
            if i>0 and nums[i] == nums[i-1]:
                continue
            while left < right:
                target = nums[i] + nums[left] + nums[right]
            
                if target>0:
                    right -= 1
                    
                elif target < 0 :
                    left += 1
                    
                else:
                    data.append(  [ nums[i],nums[left],nums[right] ]  )
                    left+=1
                    while ( nums[left] == nums[left-1]  and left<right):
                        left +=1
                    
        return data

# 3 2 -3 0 1
# -3 0 1 2 3

# we have to skip duplicate for one pointer either left or right so that one of them remains unique otherwise it will cause problems as duplicates will be in it
Iteration 0:
-3.. is i
left = 0
right = 3

-3+0+3
data.append(their indices)

Now same i = -3,
left = 1
right = 3

result is 1 -> -3+1+3

so target > 0, decrement right pointer
Now same i = -3,
left = 1
right = 2




            


